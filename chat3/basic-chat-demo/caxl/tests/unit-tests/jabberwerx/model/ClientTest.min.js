/**
 * filename:        ClientTest.min.js
 * created at:      2010/10/10
 *
 * Copyrights
 *
 * Portions created or assigned to Cisco Systems, Inc. are
 * Copyright (c) 2011 Cisco Systems, Inc.  All Rights Reserved.
 */
jabberwerx.$(document).ready(function() {
    module("jabberwerx/model/client");
    
    test("Test Start Reconnect Countdown Default Period", function() {
        var countdownTime = null;
        var client = new jabberwerx.Client();
        client.event('reconnectCountdownStarted').bind(function(eventObj) {
            countdownTime = eventObj.data;
        });
        client._startReconnectCountdown();
        ok(countdownTime >= 27 && countdownTime <= 33, 
           "Countdown time should be between 27 and 33 inclusive by default and was " + 
           countdownTime);
        client.cancelReconnect();
    });
    
    // Originally had a test here to check that the timeout got to the end and correctly tried to
    // reconnect, but was having issues between QUnit start and stop methods and our reconnect timer
    // code so got rid of them
    
    test("Test Reconnect Cancelled Event Firing", function() {
        var reconnectCancelledEventFired = false;
        var client = new jabberwerx.Client();
        client.event("reconnectCancelled").bind(function() {
            reconnectCancelledEventFired = true;
        });
        client._startReconnectCountdown();
        client.cancelReconnect();
        ok(reconnectCancelledEventFired, "reconnectCancelled event should have been fired");
        same(client._reconnectTimerID, null, "timerID should be null");
    });
  
    test("Test Start Reconnect Countdown With Base Reconnect Period of Zero", function() {
        var client = new jabberwerx.Client();
        jabberwerx._config.baseReconnectCountdown = 0;
        client._startReconnectCountdown();
        same(client._reconnectTimerID, null, "timerID should be null");
    });
    
    //NOTE: all the functions/variables with '_' prefix are private in the CAXL library, we use them here only for testing purpose
    test("Test switchHost function", function() {
        var client = new jabberwerx.Client();
        
        // if fqdn is specified in the bindurl, this function builds fqdn for the host value sent.
        equals(client._switchHost("host1.cisco.com","host2"),"host2.cisco.com","switch success");
        equals(client._switchHost("host.cisco.com","host2"),"host2.cisco.com","switch success");
        equals(client._switchHost("host-1.cisco.com","host-2"),"host-2.cisco.com","switch success");        
        equals(client._switchHost("host1.cisco.co.uk","host2"),"host2.cisco.co.uk","switch success");
        // if bindurl has just the hostname, this function returns the host value back without any changes.
        equals(client._switchHost("host1","host2"),"host2","switch success");
        // if bindurl has IP address, this function returns the host value back without any changes.
        equals(client._switchHost("1.1.1.1","host2"),"host2","switch success");
        equals(client._switchHost("1.1.1.1","host2.cisco.com"),"host2.cisco.com","switch success");        
        // if host value is IP address, this function returns the host value back without any changes.
        equals(client._switchHost("host1.cisco.com","1.1.1.1"),"1.1.1.1","switch success");
        equals(client._switchHost("host1","1.1.1.1"),"1.1.1.1","switch success");
        equals(client._switchHost("2.2.2.2","1.1.1.1"),"1.1.1.1","switch success");
        // if host value is FQDN, this function returns the host value back without any changes.
        equals(client._switchHost("2.2.2.2","host2.cisco.com"),"host2.cisco.com","switch success");        
        equals(client._switchHost("host1","host2.cisco.com"),"host2.cisco.com","switch success");
        // if host value is null, this function returns null.
        equals(client._switchHost("2.2.2.2",null),null,"switch success");        
        equals(client._switchHost("host1",null),null,"switch success");
        equals(client._switchHost("host1.sample.com",null),null,"switch success");
        equals(client._switchHost(null,null),null,"switch success");
    });    
});
